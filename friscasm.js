module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "absaddr_mem": parse_absaddr_mem,
        "aluop": parse_aluop,
        "aluop_name": parse_aluop_name,
        "base": parse_base,
        "baseop": parse_baseop,
        "baseop_name": parse_baseop_name,
        "cmpop": parse_cmpop,
        "cmpop_name": parse_cmpop_name,
        "commentPart": parse_commentPart,
        "delimiter": parse_delimiter,
        "dsop": parse_dsop,
        "dsop_name": parse_dsop_name,
        "dwhbop": parse_dwhbop,
        "dwhbop_name": parse_dwhbop_name,
        "dwop": parse_dwop,
        "dwop_name": parse_dwop_name,
        "endop": parse_endop,
        "endop_name": parse_endop_name,
        "equop": parse_equop,
        "equop_name": parse_equop_name,
        "flag": parse_flag,
        "flag_name": parse_flag_name,
        "immaddr": parse_immaddr,
        "instruction": parse_instruction,
        "instruction_end": parse_instruction_end,
        "instruction_or_end": parse_instruction_or_end,
        "instructions": parse_instructions,
        "jmpop_name": parse_jmpop_name,
        "label": parse_label,
        "memop": parse_memop,
        "memop_name": parse_memop_name,
        "moveop": parse_moveop,
        "moveop_name": parse_moveop_name,
        "newline": parse_newline,
        "nonjmpop_name": parse_nonjmpop_name,
        "number": parse_number,
        "numberWithoutBase": parse_numberWithoutBase,
        "operation": parse_operation,
        "operationPart": parse_operationPart,
        "orgop": parse_orgop,
        "orgop_name": parse_orgop_name,
        "regaddr": parse_regaddr,
        "register": parse_register,
        "rinaddr": parse_rinaddr,
        "rinaddroff": parse_rinaddroff,
        "sraddr": parse_sraddr,
        "stackop": parse_stackop,
        "stackop_name": parse_stackop_name,
        "uprop": parse_uprop,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "instructions";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_instructions() {
        var cacheKey = 'instructions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_instruction_or_end();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse_newline();
          if (result6 !== null) {
            var result7 = (function() {linecounter++; return true;})() ? '' : null;
            if (result7 !== null) {
              var result8 = parse_instruction_or_end();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse_newline();
            if (result6 !== null) {
              var result7 = (function() {linecounter++; return true;})() ? '' : null;
              if (result7 !== null) {
                var result8 = parse_instruction_or_end();
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i1, i2) {
              var instrs = [];
              var machinecode = [];
              var unknownlabels = [];
          
              if (typeof i1.op !== "undefined" && i1.op !== "") {
                instrs.push(i1);
              }
              
              for (var i=0; i<i2.length; i++) {
                if (typeof i2[i][2].op !== "undefined" && i2[i][2].op !== "") {
                  instrs.push(i2[i][2]);
                }
              }
          
              function replaceLabel(element) {
                if (element.type === "label") {
                  var labelValue = labels[element.value];
          
                  if (typeof labelValue !== "undefined") {
                    element.type = "num";
                    element.value = labelValue;
                  } else {
                    unknownlabels.push(element.value);
                    element.value = null;
                  }
                }
              }
              
              // replace labels
              for (var i=0; i<instrs.length; i++) {
                if (instrs[i].op in aluops || instrs[i].op in cmpops || instrs[i].op in moveops) {
                  replaceLabel(instrs[i].alusrc2);
                } else if (instrs[i].op in jmpops) {
                  replaceLabel(instrs[i].addr);
                } else if (instrs[i].op in memops) {
                  replaceLabel(instrs[i].mem);
                } else if (instrs[i].op in dwhbops) {
                  for (var j=0; j<instrs[i].values.length; j++) {
                    replaceLabel(instrs[i].values[j]);
                  }
                }
              }
              
              // check if all labels are defined
              if (unknownlabels.length > 0) {
                throw new Error("Unknown labels:" + unknownlabels.toString());
              }
             
              // generate machine code
              for (var i=0; i<instrs.length; i++) {
                generateMachineCode(instrs[i]);
                machinecode.push(instrs[i]);
              }
              
              return machinecode;
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newline() {
        var cacheKey = 'newline@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "\n") {
          var result4 = "\n";
          pos += 1;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            var result3 = "\r\n";
            pos += 2;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "\r") {
              var result2 = "\r";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 2) === "\n\r") {
                var result1 = "\n\r";
                pos += 2;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\n\\r\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction_or_end() {
        var cacheKey = 'instruction_or_end@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result5 = parse_instruction_end();
        var result6 = result5 !== null
          ? (function(i) { var ins = i; ins.line = linecounter-1; return ins;})(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_instruction();
          var result3 = result2 !== null
            ? (function(i) { var ins = i; ins.line = linecounter; return ins;})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction_end() {
        var cacheKey = 'instruction_end@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result14 = parse_label();
        var result3 = result14 !== null ? result14 : '';
        if (result3 !== null) {
          var result13 = parse_whitespace();
          if (result13 !== null) {
            var result4 = [];
            while (result13 !== null) {
              result4.push(result13);
              var result13 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_endop();
            if (result5 !== null) {
              var result12 = parse_commentPart();
              var result6 = result12 !== null ? result12 : '';
              if (result6 !== null) {
                var savedPos2 = pos;
                var result9 = parse_newline();
                if (result9 !== null) {
                  var result10 = [];
                  if (input.length > pos) {
                    var result11 = input.charAt(pos);
                    pos++;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  while (result11 !== null) {
                    result10.push(result11);
                    if (input.length > pos) {
                      var result11 = input.charAt(pos);
                      pos++;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed('any character');
                      }
                    }
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l, o, c) {
                return o;
              })(result1[0], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction() {
        var cacheKey = 'instruction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result8 = parse_label();
        var result3 = result8 !== null ? result8 : '';
        if (result3 !== null) {
          var result7 = parse_operationPart();
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            var result6 = parse_commentPart();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l, o, c) {
              if (o === "") {
                return {};
              }
          
              if (!(o.op in dwops || o.op in equops || o.op in endops)) {
                curloc = curloc % 4 === 0 ? curloc : curloc + (4-curloc%4);
              }
              
              if (l !== "") {
                if (!(o.op in baseops || o.op in endops || o.op in orgops || o.op in equops)) {
                  labels[l] = curloc;
                } else if (o.op in equops) {
                  labels[l] = o.value;
                }
              }
              
              o.curloc = curloc;
              
              if (o.op in aluops || o.op in cmpops || o.op in moveops || o.op in uprops || o.op in memops) {
                curloc += 4
              } else if (o.op in orgops) {
                curloc = o.value;
              } else if (o.op in dwops) {
                curloc += o.values.length;
              } else if (o.op in equops) {
                curloc = curloc;
              } else if (o.op in endops) {
                curloc = curloc;
              } else if (o.op in dsops) {
                curloc += o.value;
              } else if (o.op in dwhbops) {   
                curloc += o.size*o.values.length;
              }
          
              if (o.op in baseops) {
                defaultBase = o.value;
              }    
          
              if (o.op in endops || o.op in equops || o.op in orgops) {
                return {};
              } else {
                return o;
              }
            })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = 'label@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result6 = input.charAt(pos);
          pos++;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 !== null) {
          var result3 = '';
          pos = savedPos2;
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[0-9A-z]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9A-z]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[0-9A-z]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9A-z]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) {
              return l.join("");
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operationPart() {
        var cacheKey = 'operationPart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_whitespace();
        if (result5 !== null) {
          var result3 = [];
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_whitespace();
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = parse_operation();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o) {return o;})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operation() {
        var cacheKey = 'operation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result12 = parse_dwhbop();
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var result11 = parse_baseop();
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var result10 = parse_dsop();
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var result9 = parse_equop();
              if (result9 !== null) {
                var result0 = result9;
              } else {
                var result8 = parse_dwop();
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var result7 = parse_orgop();
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    var result6 = parse_stackop();
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      var result5 = parse_memop();
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        var result4 = parse_uprop();
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          var result3 = parse_moveop();
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            var result2 = parse_cmpop();
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              var result1 = parse_aluop();
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regaddr() {
        var cacheKey = 'regaddr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_register();
        var result2 = result1 !== null
          ? (function(value) { return {type : "reg", value : value}; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sraddr() {
        var cacheKey = 'sraddr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[sS]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[sS]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[rR]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[rR]");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) { return {type : "sr", value : "sr"}; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_immaddr() {
        var cacheKey = 'immaddr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result5 = parse_number();
        var result6 = result5 !== null
          ? (function(value) { return {type : "num", value : value}; })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_label();
          var result3 = result2 !== null
            ? (function(value) { return {type : "label", value : value}; })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_absaddr_mem() {
        var cacheKey = 'absaddr_mem@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result10 = "(";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result10 !== null) {
          var result11 = parse_label();
          if (result11 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result12 = ")";
              pos += 1;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result12 !== null) {
              var result8 = [result10, result11, result12];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(value) { return {type : "label", value : value}; })(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_number();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(value) { return {type : "num", value : value}; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rinaddr() {
        var cacheKey = 'rinaddr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_regaddr();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) { return value; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rinaddroff() {
        var cacheKey = 'rinaddroff@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_register();
          if (result4 !== null) {
            var savedPos4 = pos;
            var savedPos5 = pos;
            var savedReportMatchFailuresVar1 = reportMatchFailures;
            reportMatchFailures = false;
            var result14 = parse_numberWithoutBase();
            reportMatchFailures = savedReportMatchFailuresVar1;
            if (result14 !== null) {
              var result12 = '';
              pos = savedPos5;
            } else {
              var result12 = null;
            }
            if (result12 !== null) {
              var result13 = parse_numberWithoutBase();
              if (result13 !== null) {
                var result11 = [result12, result13];
              } else {
                var result11 = null;
                pos = savedPos4;
              }
            } else {
              var result11 = null;
              pos = savedPos4;
            }
            if (result11 !== null) {
              var result5 = result11;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result10 = parse_numberWithoutBase();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result10 === null) {
                var result8 = '';
              } else {
                var result8 = null;
                pos = savedPos3;
              }
              if (result8 !== null) {
                if (input.substr(pos, 0) === "") {
                  var result9 = "";
                  pos += 0;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\"");
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                var result5 = result7;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(reg, val) { 
                return {type : "regoff", value : reg, offset : val[1] === "" ? 0 : val[1]  };
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_delimiter() {
        var cacheKey = 'delimiter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result5 = parse_whitespace();
        while (result5 !== null) {
          result1.push(result5);
          var result5 = parse_whitespace();
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result2 = ",";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            var result3 = [];
            var result4 = parse_whitespace();
            while (result4 !== null) {
              result3.push(result4);
              var result4 = parse_whitespace();
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_moveop_name() {
        var cacheKey = 'moveop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "MOVE") {
          var result0 = "MOVE";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"MOVE\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_aluop_name() {
        var cacheKey = 'aluop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "OR") {
          var result12 = "OR";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"OR\"");
          }
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          if (input.substr(pos, 3) === "AND") {
            var result11 = "AND";
            pos += 3;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"AND\"");
            }
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            if (input.substr(pos, 3) === "XOR") {
              var result10 = "XOR";
              pos += 3;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"XOR\"");
              }
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              if (input.substr(pos, 3) === "ADD") {
                var result9 = "ADD";
                pos += 3;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ADD\"");
                }
              }
              if (result9 !== null) {
                var result0 = result9;
              } else {
                if (input.substr(pos, 3) === "ADC") {
                  var result8 = "ADC";
                  pos += 3;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"ADC\"");
                  }
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  if (input.substr(pos, 3) === "SUB") {
                    var result7 = "SUB";
                    pos += 3;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"SUB\"");
                    }
                  }
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    if (input.substr(pos, 3) === "SBC") {
                      var result6 = "SBC";
                      pos += 3;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"SBC\"");
                      }
                    }
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      if (input.substr(pos, 4) === "ROTL") {
                        var result5 = "ROTL";
                        pos += 4;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"ROTL\"");
                        }
                      }
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        if (input.substr(pos, 4) === "ROTR") {
                          var result4 = "ROTR";
                          pos += 4;
                        } else {
                          var result4 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"ROTR\"");
                          }
                        }
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          if (input.substr(pos, 3) === "SHL") {
                            var result3 = "SHL";
                            pos += 3;
                          } else {
                            var result3 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"SHL\"");
                            }
                          }
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            if (input.substr(pos, 3) === "SHR") {
                              var result2 = "SHR";
                              pos += 3;
                            } else {
                              var result2 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"SHR\"");
                              }
                            }
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              if (input.substr(pos, 4) === "ASHR") {
                                var result1 = "ASHR";
                                pos += 4;
                              } else {
                                var result1 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"ASHR\"");
                                }
                              }
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmpop_name() {
        var cacheKey = 'cmpop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "CMP") {
          var result0 = "CMP";
          pos += 3;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"CMP\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonjmpop_name() {
        var cacheKey = 'nonjmpop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "RETI") {
          var result4 = "RETI";
          pos += 4;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"RETI\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 4) === "RETN") {
            var result3 = "RETN";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"RETN\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 3) === "RET") {
              var result2 = "RET";
              pos += 3;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"RET\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 4) === "HALT") {
                var result1 = "HALT";
                pos += 4;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"HALT\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jmpop_name() {
        var cacheKey = 'jmpop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "JP") {
          var result3 = "JP";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"JP\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 4) === "CALL") {
            var result2 = "CALL";
            pos += 4;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"CALL\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 2) === "JR") {
              var result1 = "JR";
              pos += 2;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"JR\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_memop_name() {
        var cacheKey = 'memop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "LOADB") {
          var result6 = "LOADB";
          pos += 5;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"LOADB\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 6) === "STOREB") {
            var result5 = "STOREB";
            pos += 6;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"STOREB\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 5) === "LOADH") {
              var result4 = "LOADH";
              pos += 5;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"LOADH\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 6) === "STOREH") {
                var result3 = "STOREH";
                pos += 6;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"STOREH\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 4) === "LOAD") {
                  var result2 = "LOAD";
                  pos += 4;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"LOAD\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 5) === "STORE") {
                    var result1 = "STORE";
                    pos += 5;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"STORE\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stackop_name() {
        var cacheKey = 'stackop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "POP") {
          var result2 = "POP";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"POP\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 4) === "PUSH") {
            var result1 = "PUSH";
            pos += 4;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"PUSH\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orgop_name() {
        var cacheKey = 'orgop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "`ORG") {
          var result0 = "`ORG";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`ORG\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwop_name() {
        var cacheKey = 'dwop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "`DW") {
          var result0 = "`DW";
          pos += 3;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`DW\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equop_name() {
        var cacheKey = 'equop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "`EQU") {
          var result0 = "`EQU";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`EQU\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dsop_name() {
        var cacheKey = 'dsop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "`DS") {
          var result0 = "`DS";
          pos += 3;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`DS\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endop_name() {
        var cacheKey = 'endop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "`END") {
          var result0 = "`END";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`END\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_baseop_name() {
        var cacheKey = 'baseop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "`BASE") {
          var result0 = "`BASE";
          pos += 5;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"`BASE\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwhbop_name() {
        var cacheKey = 'dwhbop_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "DW") {
          var result3 = "DW";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"DW\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "DH") {
            var result2 = "DH";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"DH\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 2) === "DB") {
              var result1 = "DB";
              pos += 2;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"DB\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_flag_name() {
        var cacheKey = 'flag_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "M") {
          var result20 = "M";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"M\"");
          }
        }
        if (result20 !== null) {
          var result0 = result20;
        } else {
          if (input.substr(pos, 2) === "NN") {
            var result19 = "NN";
            pos += 2;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"NN\"");
            }
          }
          if (result19 !== null) {
            var result0 = result19;
          } else {
            if (input.substr(pos, 2) === "NV") {
              var result18 = "NV";
              pos += 2;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"NV\"");
              }
            }
            if (result18 !== null) {
              var result0 = result18;
            } else {
              if (input.substr(pos, 2) === "NZ") {
                var result17 = "NZ";
                pos += 2;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\"NZ\"");
                }
              }
              if (result17 !== null) {
                var result0 = result17;
              } else {
                if (input.substr(pos, 2) === "NE") {
                  var result16 = "NE";
                  pos += 2;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"NE\"");
                  }
                }
                if (result16 !== null) {
                  var result0 = result16;
                } else {
                  if (input.substr(pos, 2) === "NC") {
                    var result15 = "NC";
                    pos += 2;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"NC\"");
                    }
                  }
                  if (result15 !== null) {
                    var result0 = result15;
                  } else {
                    if (input.substr(pos, 1) === "N") {
                      var result14 = "N";
                      pos += 1;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"N\"");
                      }
                    }
                    if (result14 !== null) {
                      var result0 = result14;
                    } else {
                      if (input.substr(pos, 1) === "P") {
                        var result13 = "P";
                        pos += 1;
                      } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"P\"");
                        }
                      }
                      if (result13 !== null) {
                        var result0 = result13;
                      } else {
                        if (input.substr(pos, 1) === "C") {
                          var result12 = "C";
                          pos += 1;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"C\"");
                          }
                        }
                        if (result12 !== null) {
                          var result0 = result12;
                        } else {
                          if (input.substr(pos, 3) === "ULT") {
                            var result11 = "ULT";
                            pos += 3;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"ULT\"");
                            }
                          }
                          if (result11 !== null) {
                            var result0 = result11;
                          } else {
                            if (input.substr(pos, 3) === "UGE") {
                              var result10 = "UGE";
                              pos += 3;
                            } else {
                              var result10 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"UGE\"");
                              }
                            }
                            if (result10 !== null) {
                              var result0 = result10;
                            } else {
                              if (input.substr(pos, 1) === "V") {
                                var result9 = "V";
                                pos += 1;
                              } else {
                                var result9 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"V\"");
                                }
                              }
                              if (result9 !== null) {
                                var result0 = result9;
                              } else {
                                if (input.substr(pos, 1) === "Z") {
                                  var result8 = "Z";
                                  pos += 1;
                                } else {
                                  var result8 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"Z\"");
                                  }
                                }
                                if (result8 !== null) {
                                  var result0 = result8;
                                } else {
                                  if (input.substr(pos, 2) === "EQ") {
                                    var result7 = "EQ";
                                    pos += 2;
                                  } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"EQ\"");
                                    }
                                  }
                                  if (result7 !== null) {
                                    var result0 = result7;
                                  } else {
                                    if (input.substr(pos, 3) === "ULE") {
                                      var result6 = "ULE";
                                      pos += 3;
                                    } else {
                                      var result6 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"ULE\"");
                                      }
                                    }
                                    if (result6 !== null) {
                                      var result0 = result6;
                                    } else {
                                      if (input.substr(pos, 3) === "UGT") {
                                        var result5 = "UGT";
                                        pos += 3;
                                      } else {
                                        var result5 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"UGT\"");
                                        }
                                      }
                                      if (result5 !== null) {
                                        var result0 = result5;
                                      } else {
                                        if (input.substr(pos, 3) === "SLT") {
                                          var result4 = "SLT";
                                          pos += 3;
                                        } else {
                                          var result4 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"SLT\"");
                                          }
                                        }
                                        if (result4 !== null) {
                                          var result0 = result4;
                                        } else {
                                          if (input.substr(pos, 3) === "SLE") {
                                            var result3 = "SLE";
                                            pos += 3;
                                          } else {
                                            var result3 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"SLE\"");
                                            }
                                          }
                                          if (result3 !== null) {
                                            var result0 = result3;
                                          } else {
                                            if (input.substr(pos, 3) === "SGE") {
                                              var result2 = "SGE";
                                              pos += 3;
                                            } else {
                                              var result2 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"SGE\"");
                                              }
                                            }
                                            if (result2 !== null) {
                                              var result0 = result2;
                                            } else {
                                              if (input.substr(pos, 3) === "SGT") {
                                                var result1 = "SGT";
                                                pos += 3;
                                              } else {
                                                var result1 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"SGT\"");
                                                }
                                              }
                                              if (result1 !== null) {
                                                var result0 = result1;
                                              } else {
                                                var result0 = null;;
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_aluop() {
        var cacheKey = 'aluop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_aluop_name();
        if (result3 !== null) {
          var result12 = parse_whitespace();
          if (result12 !== null) {
            var result4 = [];
            while (result12 !== null) {
              result4.push(result12);
              var result12 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_regaddr();
            if (result5 !== null) {
              var result6 = parse_delimiter();
              if (result6 !== null) {
                var result11 = parse_regaddr();
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  var result10 = parse_immaddr();
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result8 = parse_delimiter();
                  if (result8 !== null) {
                    var result9 = parse_regaddr();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, alusrc1, alusrc2, aludest) {
                return { op : op, optype : 'aluop', alusrc1 : alusrc1, alusrc2 : alusrc2, aludest : aludest };
              })(result1[0], result1[2], result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmpop() {
        var cacheKey = 'cmpop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_cmpop_name();
        if (result3 !== null) {
          var result10 = parse_whitespace();
          if (result10 !== null) {
            var result4 = [];
            while (result10 !== null) {
              result4.push(result10);
              var result10 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_regaddr();
            if (result5 !== null) {
              var result6 = parse_delimiter();
              if (result6 !== null) {
                var result9 = parse_regaddr();
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_immaddr();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, alusrc1, alusrc2) {
                return { op : op, optype : 'cmpop', alusrc1 : alusrc1, alusrc2 : alusrc2 };
              })(result1[0], result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_moveop() {
        var cacheKey = 'moveop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_moveop_name();
        if (result3 !== null) {
          var result13 = parse_whitespace();
          if (result13 !== null) {
            var result4 = [];
            while (result13 !== null) {
              result4.push(result13);
              var result13 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result12 = parse_regaddr();
            if (result12 !== null) {
              var result5 = result12;
            } else {
              var result11 = parse_sraddr();
              if (result11 !== null) {
                var result5 = result11;
              } else {
                var result10 = parse_immaddr();
                if (result10 !== null) {
                  var result5 = result10;
                } else {
                  var result5 = null;;
                };
              };
            }
            if (result5 !== null) {
              var result6 = parse_delimiter();
              if (result6 !== null) {
                var result9 = parse_regaddr();
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_sraddr();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, alusrc2, aludest) {
                return { op : op, optype : 'moveop', alusrc2 : alusrc2, aludest : aludest };
              })(result1[0], result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_uprop() {
        var cacheKey = 'uprop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_jmpop_name();
        if (result9 !== null) {
          var result10 = parse_flag();
          if (result10 !== null) {
            var result15 = parse_whitespace();
            if (result15 !== null) {
              var result11 = [];
              while (result15 !== null) {
                result11.push(result15);
                var result15 = parse_whitespace();
              }
            } else {
              var result11 = null;
            }
            if (result11 !== null) {
              var result14 = parse_immaddr();
              if (result14 !== null) {
                var result12 = result14;
              } else {
                var result13 = parse_rinaddr();
                if (result13 !== null) {
                  var result12 = result13;
                } else {
                  var result12 = null;;
                };
              }
              if (result12 !== null) {
                var result7 = [result9, result10, result11, result12];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(op, fl, addr) {
                return { op : op, optype : 'jmpop', flag : fl, addr : addr}; 
              })(result7[0], result7[1], result7[3])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_nonjmpop_name();
          if (result4 !== null) {
            var result5 = parse_flag();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(op, fl) {
                  return { op : op, optype : 'uprop', flag : fl};
                })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_flag() {
        var cacheKey = 'flag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "_") {
          var result7 = "_";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"_\"");
          }
        }
        if (result7 !== null) {
          var result8 = parse_flag_name();
          if (result8 !== null) {
            var result5 = [result7, result8];
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(fl) {return fl;})(result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function(fl) {return fl;})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_memop() {
        var cacheKey = 'memop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_memop_name();
        if (result3 !== null) {
          var result10 = parse_whitespace();
          if (result10 !== null) {
            var result4 = [];
            while (result10 !== null) {
              result4.push(result10);
              var result10 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_regaddr();
            if (result5 !== null) {
              var result6 = parse_delimiter();
              if (result6 !== null) {
                var result9 = parse_rinaddroff();
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_absaddr_mem();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, reg, mem) {
                return { op : op, optype : 'memop', reg : reg, mem : mem };
              })(result1[0], result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stackop() {
        var cacheKey = 'stackop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_stackop_name();
        if (result3 !== null) {
          var result6 = parse_whitespace();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_regaddr();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, reg) {
                return { op : op, optype : 'stackop', reg : reg };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orgop() {
        var cacheKey = 'orgop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_orgop_name();
        if (result3 !== null) {
          var result6 = parse_whitespace();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_number();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, value) {
                return { op : op, optype : 'orgop', value : value };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwop() {
        var cacheKey = 'dwop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_dwop_name();
        if (result3 !== null) {
          var result14 = parse_whitespace();
          if (result14 !== null) {
            var result4 = [];
            while (result14 !== null) {
              result4.push(result14);
              var result14 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result7 = parse_number();
            if (result7 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result11 !== null) {
                var result12 = [];
                var result13 = parse_whitespace();
                while (result13 !== null) {
                  result12.push(result13);
                  var result13 = parse_whitespace();
                }
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
              if (result10 !== null) {
                var result8 = result10;
              } else {
                if (input.substr(pos, 0) === "") {
                  var result9 = "";
                  pos += 0;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\"");
                  }
                }
                if (result9 !== null) {
                  var result8 = result9;
                } else {
                  var result8 = null;;
                };
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var savedPos2 = pos;
                var result7 = parse_number();
                if (result7 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result11 = ",";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result11 !== null) {
                    var result12 = [];
                    var result13 = parse_whitespace();
                    while (result13 !== null) {
                      result12.push(result13);
                      var result13 = parse_whitespace();
                    }
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    if (input.substr(pos, 0) === "") {
                      var result9 = "";
                      pos += 0;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\"");
                      }
                    }
                    if (result9 !== null) {
                      var result8 = result9;
                    } else {
                      var result8 = null;;
                    };
                  }
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, values) {
                var vals = [];
                
                for (var i=0; i<values.length; i++) {
                  vals.push(values[i][0]);
                }
                
                return { op : op, optype : 'dwop', values : vals };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equop() {
        var cacheKey = 'equop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_equop_name();
        if (result3 !== null) {
          var result6 = parse_whitespace();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_number();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, value) {
                return { op : op, optype : 'equop', value : value };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dsop() {
        var cacheKey = 'dsop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_dsop_name();
        if (result3 !== null) {
          var result6 = parse_whitespace();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_number();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, value) {
                return { op : op, optype : 'dsop', value : value };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endop() {
        var cacheKey = 'endop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_endop_name();
        var result2 = result1 !== null
          ? (function(op) { return { op : op, optype : 'endop'}; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_baseop() {
        var cacheKey = 'baseop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_baseop_name();
        if (result3 !== null) {
          var result6 = parse_whitespace();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_base();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, base) {
                return { op : op, optype : 'baseop', value : base};
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwhbop() {
        var cacheKey = 'dwhbop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_dwhbop_name();
        if (result3 !== null) {
          var result14 = parse_whitespace();
          if (result14 !== null) {
            var result4 = [];
            while (result14 !== null) {
              result4.push(result14);
              var result14 = parse_whitespace();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result7 = parse_immaddr();
            if (result7 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result11 !== null) {
                var result12 = [];
                var result13 = parse_whitespace();
                while (result13 !== null) {
                  result12.push(result13);
                  var result13 = parse_whitespace();
                }
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
              if (result10 !== null) {
                var result8 = result10;
              } else {
                if (input.substr(pos, 0) === "") {
                  var result9 = "";
                  pos += 0;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\"");
                  }
                }
                if (result9 !== null) {
                  var result8 = result9;
                } else {
                  var result8 = null;;
                };
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var savedPos2 = pos;
                var result7 = parse_immaddr();
                if (result7 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result11 = ",";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result11 !== null) {
                    var result12 = [];
                    var result13 = parse_whitespace();
                    while (result13 !== null) {
                      result12.push(result13);
                      var result13 = parse_whitespace();
                    }
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    if (input.substr(pos, 0) === "") {
                      var result9 = "";
                      pos += 0;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\"");
                      }
                    }
                    if (result9 !== null) {
                      var result8 = result9;
                    } else {
                      var result8 = null;;
                    };
                  }
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, values) {
                var vals = [];
                
                for (var i=0; i<values.length; i++) {
                  vals.push(values[i][0]);
                }
          
                var size = op === "DW" ? 4 : (op === "DH" ? 2 : 1);
                
                return { op : op, optype : 'dwhbop', values : vals, size : size};
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_commentPart() {
        var cacheKey = 'commentPart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result7 = parse_whitespace();
        while (result7 !== null) {
          result1.push(result7);
          var result7 = parse_whitespace();
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ";") {
            var result4 = ";";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
            while (result6 !== null) {
              result5.push(result6);
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "	") {
            var result1 = "	";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"	\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_register() {
        var cacheKey = 'register@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[rR]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[rR]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-7]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[0-7]");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(regnum) {
              return parseInt(regnum, 10);
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos4 = pos;
        if (input.substr(pos, 1) === "%") {
          var result15 = "%";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"%\"");
          }
        }
        if (result15 !== null) {
          var result16 = parse_base();
          if (result16 !== null) {
            if (input.substr(pos, 1) === " ") {
              var result18 = " ";
              pos += 1;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\" \"");
              }
            }
            if (result18 !== null) {
              var result17 = [];
              while (result18 !== null) {
                result17.push(result18);
                if (input.substr(pos, 1) === " ") {
                  var result18 = " ";
                  pos += 1;
                } else {
                  var result18 = null;
                  if (reportMatchFailures) {
                    matchFailed("\" \"");
                  }
                }
              }
            } else {
              var result17 = null;
            }
            if (result17 !== null) {
              var result14 = [result15, result16, result17];
            } else {
              var result14 = null;
              pos = savedPos4;
            }
          } else {
            var result14 = null;
            pos = savedPos4;
          }
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result3 = result14;
        } else {
          if (input.substr(pos, 0) === "") {
            var result13 = "";
            pos += 0;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result12 = input.charAt(pos);
            pos++;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result4 = result12 !== null ? result12 : '';
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var savedPos3 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result9 !== null) {
              var result10 = [];
              if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
              while (result11 !== null) {
                result10.push(result11);
                if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9a-hA-H]");
                  }
                }
              }
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result8 !== null) {
              var result5 = '';
              pos = savedPos2;
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = [];
              if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
              while (result7 !== null) {
                result6.push(result7);
                if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9a-hA-H]");
                  }
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(b, p, digits) { 
              var d = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"]; 
              var base = b === "" ? defaultBase : b[1];
              for (var i=0; i<digits.length; i++) {
                var found = false;
                for (var j=0; j<base; j++) {
                  if (digits[i].toLowerCase() === d[j]) {
                    found = true;
                    break;
                  }
                }
                
                if (!found) {
                  return null;
                }
              }
              
              var prefix = p === "-" ? -1 : 1;
              
              return prefix*parseInt(digits.join(""), b);
            })(result1[0], result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_base() {
        var cacheKey = 'base@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[bBoOdDhH]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[bBoOdDhH]");
          }
        }
        var result2 = result1 !== null
          ? (function(b) {
              b = b.toLowerCase(); 
              
              if(b === "b") { 
                return 2;
              } else if (b === "o") {
                return 8;
              } else if (b === "d") {
                return 10; 
              } else if (b === "h") {
                return 16; 
              } 
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numberWithoutBase() {
        var cacheKey = 'numberWithoutBase@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        if (input.substr(pos).match(/^[+\-]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[+\\-]");
          }
        }
        if (result8 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result9 !== null) {
            var result10 = [];
            if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9a-hA-H]");
              }
            }
            while (result11 !== null) {
              result10.push(result11);
              if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 !== null) {
          var result3 = '';
          pos = savedPos2;
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9a-hA-H]");
              }
            }
            while (result6 !== null) {
              result5.push(result6);
              if (input.substr(pos).match(/^[0-9a-hA-H]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, digits) {
              return (p === "-" ? -1 : 1) * parseInt(digits.join(""), defaultBase);
            })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var defaultBase = 16;
      
    var curloc = 0;
      
    var labels = {};
      
    var instructions = [];
      
    var instruction = {};
      
    var linecounter = 1;
      
    
      
    var moveops = {  
      
      "MOVE"   : "00000"
      
    };
      
    
      
    var aluops = {
      
      "OR"     : "00001",
      
      "AND"    : "00010",
      
      "XOR"    : "00011",
      
      "ADD"    : "00100",
      
      "ADC"    : "00101",
      
      "SUB"    : "00110",
      
      "SBC"    : "00111",
      
      "ROTL"   : "01000", 
      
      "ROTR"   : "01001",
      
      "SHL"    : "01010",
      
      "SHR"    : "01011",
      
      "ASHR"   : "01100"
      
    };
      
    
      
    var cmpops = {
      
      "CMP"    : "01101"
      
    };
      
      // 01110 Not used
      
      // 01111 Not used
      
    
      
    var uprops = {
      
      "JP"     : "11000",
      
      "CALL"   : "11001",
      
      "JR"     : "11010",
      
      "RET"    : "11011",
      
      "RETI"   : "11011",
      
      "RETN"   : "11011",
      
      "HALT"   : "11111"
      
    };
      
    
      
    var jmpops = {
      
      "JP"     : "11000",
      
      "CALL"   : "11001",
      
      "JR"     : "11010"
      
    };
      
    
      
    var memops = {
      
      "LOAD"   : "10110",
      
      "STORE"  : "10111",
      
      "LOADB"  : "10010",
      
      "STOREB" : "10011",
      
      "LOADH"  : "10100",
      
      "STOREH" : "10101"
      
    };
      
    
      
    var stackops = {
      
      "POP"    : "10000",
      
      "PUSH"   : "10001"
      
    };
      
    
      
    var orgops = {
      
      "`ORG" : ""
      
    };
      
    
      
    var dwops = {
      
      "`DW" : ""
      
    };
      
    
      
    var equops = {
      
      "`EQU" : ""
      
    };
      
    
      
    var dsops = {
      
      "`DS" : ""
      
    };
      
    
      
    var endops = {
      
      "`END" : ""
      
    };
      
    
      
    var baseops = {
      
      "`BASE" : ""
      
    };
      
    
      
    var dwhbops = {
      
      "DW" : "",
      
      "DH" : "",
      
      "DB" : ""
      
    };
      
    
      
    var flags = {
      
      ""   : "0000",
      
      "N"  : "0001",   "M"   : "0001",
      
      "NN" : "0010",   "P"   : "0010",
      
      "C"  : "0011",   "ULT" : "0011",
      
      "NC" : "0100",   "UGE" : "0100",
      
      "V"  : "0101",
      
      "NV" : "0110",
      
      "Z"  : "0111",   "EQ"  : "0111",
      
      "NZ" : "1000",   "NE"  : "1000",
      
  
      
      "ULE"  : "1001",
      
      "UGT"  : "1010",
      
      "SLT"  : "1011",
      
      "SLE"  : "1100",
      
      "SGE"  : "1101",
      
      "SGT"  : "1110"
      
    };
      
  
      
    var allops = {
      
      aluop : aluops, moveop : moveops, cmpop : cmpops, memop : memops, stackop : stackops,
      
      jmpop : jmpops, uprop : uprops, equop : equops, dwop : dwops, orgop : orgops, dsop : dsops, 
      
      endop : endops, dwhbop : dwhbops, baseop : baseops
      
    };
      
  
      
    var generateMachineCode = function(node) {
      
      var machineCode = "00000000000000000000000000000000".split("");
      
  
      
      if (typeof node === 'undefined' || typeof node.op === 'undefined' || typeof node.optype === 'undefined' ||
      
          typeof allops[node.optype] === 'undefined' || typeof allops[node.optype][node.op] === 'undefined') {
      
        throw new Error("Undefined instruction, operation or operation type." + JSON.stringify(node));
      
      }
      
  
      
      // set opcode
      
      setBits(machineCode, 27, 31, allops[node.optype][node.op]);
      
  
      
      switch(node.optype) {
      
        case 'cmpop':
      
        case 'aluop':
      
          if (node.optype === 'aluop') {
      
            setBits(machineCode, 23, 25, convertToBinaryString(node.aludest.value));
      
          }
      
          setBits(machineCode, 20, 22, convertToBinaryString(node.alusrc1.value));
      
          
      
          if (node.alusrc2.type === "reg") {
      
            setBits(machineCode, 26, 26, "0");
      
            setBits(machineCode, 17, 19, convertToBinaryString(node.alusrc2.value));
      
            setBits(machineCode, 0, 16, "00000000000000000");
      
          } else {
      
            setBits(machineCode, 26, 26, "1");
      
            setBits(machineCode, 0, 19, convertToBinaryString(node.alusrc2.value));
      
          }
      
  
      
          break;
      
        case 'moveop':
      
          if (node.aludest.type === "reg" && (node.alusrc2.type === "reg" || node.alusrc2.type === "num")) {
      
            // Kada je odredište opći registar, a izvor opći registar ili podatak:
      
            setBits(machineCode, 23, 25, convertToBinaryString(node.aludest.value));
      
            setBits(machineCode, 20, 22, "000");
      
            if (node.alusrc2.type === "reg") {
      
              setBits(machineCode, 26, 26, "0");
      
              setBits(machineCode, 17, 19, convertToBinaryString(node.alusrc2.value));
      
            } else {
      
              setBits(machineCode, 26, 26, "1");
      
              setBits(machineCode, 0, 19, convertToBinaryString(node.alusrc2.value));
      
            }
      
          } else if (node.aludest.type === "sr") {
      
            // Kada je odredište registar SR:
      
            setBits(machineCode, 20, 22, "001");
      
            if (node.alusrc2.type === "reg") {
      
              setBits(machineCode, 26, 26, "0");
      
              setBits(machineCode, 17, 19, convertToBinaryString(node.alusrc2.value));
      
            } else {
      
              setBits(machineCode, 26, 26, "1");
      
              setBits(machineCode, 0, 19, convertToBinaryString(node.alusrc2.value));
      
            }
      
          } else if (node.alusrc2.type === "sr") {
      
            // Kada je izvor registar SR:
      
            setBits(machineCode, 20, 22, "010");
      
            setBits(machineCode, 23, 25, convertToBinaryString(node.aludest.value));
      
            setBits(machineCode, 0, 19, "00000000000000000000");
      
          }
      
  
      
          break;
      
        case 'jmpop':
      
          setBits(machineCode, 20, 21, "00");
      
          setBits(machineCode, 22, 25, flags[node.flag]);
      
          if (node.addr.type === "num") {
      
            setBits(machineCode, 26, 26, "1");
      
            setBits(machineCode, 0, 19, convertToBinaryString(node.addr.value));
      
          } else { 
      
            setBits(machineCode, 26, 26, "0");
      
            setBits(machineCode, 17, 19, convertToBinaryString(node.addr.value));
      
          }
      
          break;
      
        case 'uprop':
      
          setBits(machineCode, 22, 25, flags[node.flag]);
      
          if (node.op === 'RET') {
      
            setBits(machineCode, 0, 0, "0");
      
            setBits(machineCode, 1, 1, "0");
      
          } else if (node.op === 'RETI') {
      
            setBits(machineCode, 0, 0, "1");
      
            setBits(machineCode, 1, 1, "0");
      
          } else if (node.op === 'RETN') {
      
            setBits(machineCode, 0, 0, "1");
      
            setBits(machineCode, 1, 1, "1");
      
          }
      
  
      
          break;
      
        case 'memop':
      
          setBits(machineCode, 23, 25, convertToBinaryString(node.reg.value));
      
          if (node.mem.type === "reg") {
      
            setBits(machineCode, 26, 26, "1");
      
            setBits(machineCode, 20, 22, convertToBinaryString(node.mem.value));
      
            setBits(machineCode, 0, 19, convertToBinaryString(node.mem.offset));
      
          } else {
      
            setBits(machineCode, 26, 26, "0");
      
            setBits(machineCode, 0, 19, convertToBinaryString(node.mem.value));
      
          }
      
          break;
      
        case 'stackop':
      
          setBits(machineCode, 23, 25, convertToBinaryString(node.reg.value));
      
          break;
      
      }
      
      node.machineCode = machineCode.join("");
      
    };
      
  
      
    var setBits = function(oldBits, from, to, newBits) {
      
      var len = oldBits.length;
      
      
      
      for (var i=0; i<from-to+1 || i<newBits.length; i++) {
      
        oldBits[len-to-1+i] = newBits[i];
      
      }
      
  
      
      return oldBits;
      
    };
      
  
      
    var convertToBinaryString = function(number) {
      
      return parseInt(number).toString(2);
      
    };
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
